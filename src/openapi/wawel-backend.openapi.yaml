swagger: "2.0"
info:
  description: "Backend for \"Wawel\" cinemas"
  version: "1.0.0"
  title: "Wawel backend"
  contact:
    email: "piotr.klosowski@student.uj.edu.pl"
host: "localhost:8080"
basePath: "/api"
tags:
  - name: auth
    description: Endpoints related to authentication and authorization of users
  - name: oauth2
    description: Endpoints related to authentication and authorization of users
  - name: movies
    description: Endpoints related to movies management
  - name: cinemas
    description: Endpoints related to cinemas management
  - name: screens
    description: Endpoints related to screens management
  - name: screenings
    description: Endpoints related to screenings management
schemes:
  - http
paths:
  /oauth2/v1/authorize/{identityProviderId}:
    get:
      tags:
        - oauth2
      operationId: authenticateUsingExternalIdentityProvider
      summary: ""
      consumes:
        - application/x-www-form-urlencoded
      parameters:
        - in: path
          name: identityProviderId
          required: true
          type: string
          maxLength: 255
        - in: query
          name: response_type
          required: true
          type: string
        - in: query
          name: client_id
          required: true
          type: string
        - in: query
          name: redirect_uri
          required: true
          type: string
        - in: query
          name: scope
          required: false
          type: string
        - in: query
          name: state
          required: true
          type: string
      responses:
        302:
          description: ""
          headers:
            Location:
              type: string
        400:
          description: ""
          schema:
            $ref: "#/definitions/OAuth2ErrorResponse"
        500:
          description: ""
          schema:
            $ref: "#/definitions/OAuth2ErrorResponse"
  /oauth2/v1/callback:
    get:
      tags:
        - oauth2
      operationId: authenticateUsingExternalIdentityProviderCallback
      summary: ""
      parameters:
        - in: query
          name: code
          required: true
          type: string
          maxLength: 4095
        - in: query
          name: state
          required: true
          type: string
          maxLength: 255
      responses:
        302:
          description: ""
          headers:
            Location:
              type: string
          schema:
            $ref: "#/definitions/AccessTokenResponse"
        400:
          description: ""
          schema:
            $ref: "#/definitions/OAuth2ErrorResponse"
        500:
          description: ""
          schema:
            $ref: "#/definitions/OAuth2ErrorResponse"
  /oauth2/v1/token:
    post:
      tags:
        - oauth2
      operationId: OAuth2Token
      summary: ""
      produces:
        - application/json
      parameters:
        - in: header
          name: Authorization
          required: false
          type: string
        - in: query
          name: client_id
          required: true
          type: string
        - in: query
          name: client_secret
          required: true
          type: string
        - in: query
          name: code
          required: true
          type: string
        - in: query
          name: grant_type
          required: true
          type: string
          enum:
            - authorization_code
            - password
        - in: query
          name: redirect_uri
          required: false
          type: string
      responses:
        200:
          description: Successfully authorized
          headers:
            Cache-Control:
              type: string
            Pragma:
              type: string
          schema:
            $ref: "#/definitions/AccessTokenResponse"
        500:
          description: Internal server error
          schema:
            type: object
            properties:
              reason:
                type: string

  "/v1/auth/login":
    post:
      tags:
        - auth
      operationId: login
      summary: ""
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/LoginRequest"
      responses:
        200:
          description: Successfully authorized
          schema:
            $ref: "#/definitions/AccessTokenResponse"
        401:
          description: Authorization failed
        404:
          description: User does not exist
        500:
          description: Internal server error
          schema:
            type: object
            properties:
              reason:
                type: string
  "/v1/auth/register":
    post:
      tags:
        - auth
      operationId: register
      summary: ""
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/RegisterNewUserRequest"
      responses:
        200:
          description: Successfully created new user
        409:
          description: User with provided information already exists
        500:
          description: Internal server error
          schema:
            type: object
            properties:
              reason:
                type: string
  "/v1/auth/register/complete":
    post:
      tags:
        - auth
      operationId: completeRegistration
      summary: ""
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/CompleteNewUserRegistrationRequest"
        - in: query
          name: registration_code
          required: true
          type: string
          maxLength: 255
      responses:
        200:
          description: User successfully registered
        404:
          description: User for provided registration code not found
        410:
          description: Registration code for requested user has expired and is no longer available
        500:
          description: Internal server error
          schema:
            type: object
            properties:
              reason:
                type: string

  /movies:
    get:
      tags:
        - movies
      operationId: getMovies
      summary: ""
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: query
          name: offset
          required: false
          type: integer
          minimum: 0
          default: 0
        - in: query
          name: limit
          required: false
          type: integer
          minimum: 0
          exclusiveMinimum: true
          default: 100
      responses:
        200:
          description: Available movies
          schema:
            allOf:
              - $ref: "#/definitions/Pagination"
              - type: object
                properties:
                  movies:
                    type: array
                    items:
                      $ref: "#/definitions/GetMovieResponse"
        403:
          description: Forbidden
        500:
          description: Internal server error
    post:
      tags:
        - movies
      operationId: addMovie
      summary: ""
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/AddMovieRequest"
      responses:
        201:
          description: Created new movie
          schema:
            $ref: "#/definitions/GetMovieResponse"
        500:
          description: Internal server error
  /movies/{movieId}:
    get:
      tags:
        - movies
      operationId: getMovie
      summary: ""
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: movieId
          required: true
          type: string
          format: uuid4
      responses:
        200:
          description: Movie
          schema:
            $ref: "#/definitions/GetMovieResponse"
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
    delete:
      tags:
        - movies
      operationId: deleteMovie
      summary: ""
      parameters:
        - in: path
          name: movieId
          required: true
          type: string
          format: uuid4
      responses:
        204:
          description: Successfully deleted movie
        403:
          description: Forbidden
        404:
          description: Not found
        500:
          description: Internal server error
    patch:
      tags:
        - movies
      operationId: updateMovie
      summary: ""
      parameters:
        - in: path
          name: movieId
          required: true
          type: string
          format: uuid4
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/EditMovieRequest"
      responses:
        200:
          description: Successfully edited movie
          schema:
            $ref: "#/definitions/GetMovieResponse"
        500:
          description: Internal server error

  /cinemas:
    get:
      tags:
        - cinemas
      operationId: getCinemas
      summary: Get cinemas
      produces:
        - application/json
      parameters:
        - in: query
          name: offset
          required: false
          type: integer
          minimum: 0
          default: 0
        - in: query
          name: limit
          required: false
          type: integer
          minimum: 0
          exclusiveMinimum: true
          default: 100
      responses:
        200:
          description: OK
          schema:
            allOf:
              - $ref: "#/definitions/Pagination"
              - type: object
                properties:
                  cinemas:
                    type: array
                    items:
                      $ref: "#/definitions/GetCinemasResponse"
        404:
          description: Not found
        500:
          description: Internal server error
  /cinemas/{cinemaId}:
    get:
      tags:
        - cinemas
      operationId: getCinema
      summary: Get cinema by ID
      produces:
        - application/json
      parameters:
        - in: path
          name: cinemaId
          required: true
          type: string
          format: uuid4
      responses:
        200:
          description: OK
          schema:
            $ref: "#/definitions/GetCinemasResponse"
        404:
          description: Not found
        500:
          description: Internal server error

  /screens:
    post:
      tags:
        - screens
      summary: Add screen
      operationId: addScreen
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/AddScreenRequest"
      responses:
        201:
          description: Created new screen
          schema:
            $ref: "#/definitions/GetScreenResponse"
        404:
          description: Not found
        500:
          description: Internal server error
    get:
      tags:
        - screens
      summary: Get screens
      operationId: getScreens
      produces:
        - application/json
      parameters:
        - in: query
          name: offset
          required: false
          type: integer
          minimum: 0
          default: 0
        - in: query
          name: limit
          required: false
          type: integer
          minimum: 0
          exclusiveMinimum: true
          default: 100
        - in: query
          name: screenID
          required: false
          type: string
          format: uuid4
        - in: query
          name: cinemaID
          required: false
          type: string
          format: uuid4
        - in: query
          name: name
          required: false
          type: string
      responses:
        200:
          description: Screens list
          schema:
            allOf:
              - $ref: "#/definitions/Pagination"
              - type: object
                properties:
                  screens:
                    type: array
                    items:
                      $ref: "#/definitions/GetScreenResponse"
        500:
          description: Internal server error
  /screens/{screenID}:
    get:
      tags:
        - screens
      summary: Get screens
      operationId: getScreenByID
      produces:
        - application/json
      parameters:
        - in: path
          name: screenID
          required: true
          type: string
          format: uuid4
      responses:
        200:
          description: Screens list
          schema:
            $ref: "#/definitions/GetScreenResponse"
        404:
          description: Not found
        500:
          description: Internal server error
    patch:
      tags:
        - screens
      summary: Patch screen
      operationId: updateScreen
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: screenID
          required: true
          type: string
          format: uuid4
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/PatchScreenRequest"
      responses:
        200:
          description: Created new screen
          schema:
            $ref: "#/definitions/GetScreenResponse"
        404:
          description: Not found
        500:
          description: Internal server error
    delete:
      tags:
        - screens
      summary: Patch screen
      operationId: deleteScreen
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: screenID
          required: true
          type: string
          format: uuid4
      responses:
        204:
          description: Screen deleted successfully
        404:
          description: Not found
        500:
          description: Internal server error

  /screening:
    post:
      tags:
        - screenings
      summary: Add screening
      operationId: addScreening
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/AddScreeningRequest"
      responses:
        201:
          description: Created new screening
          schema:
            $ref: "#/definitions/GetScreeningResponse"
        404:
          description: Not found
        500:
          description: Internal server error
    get:
      tags:
        - screenings
      summary: Get screenings
      operationId: getScreenings
      produces:
        - application/json
      parameters:
        - in: query
          name: offset
          required: false
          type: integer
          minimum: 0
          default: 0
        - in: query
          name: limit
          required: false
          type: integer
          minimum: 0
          exclusiveMinimum: true
          default: 100
        - in: query
          name: screeningID
          required: false
          type: string
          format: uuid4
        - in: query
          name: cinemaID
          required: false
          type: string
          format: uuid4
        - in: query
          name: movieID
          required: false
          type: string
          format: uuid4
        - in: query
          name: screenID
          required: false
          type: string
          format: uuid4
      responses:
        200:
          description: Screens list
          schema:
            allOf:
              - $ref: "#/definitions/Pagination"
              - type: object
                properties:
                  screenings:
                    type: array
                    items:
                      $ref: "#/definitions/GetScreeningResponse"
        500:
          description: Internal server error
  /screening/{screeningID}:
    get:
      tags:
        - screenings
      summary: Get screens
      operationId: getScreeningByID
      produces:
        - application/json
      parameters:
        - in: path
          name: screeningID
          required: true
          type: string
          format: uuid4
      responses:
        200:
          description: Screenings list
          schema:
            $ref: "#/definitions/GetScreeningResponse"
        404:
          description: Not found
        500:
          description: Internal server error
    patch:
      tags:
        - screenings
      summary: Patch screen
      operationId: updateScreening
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: screeningID
          required: true
          type: string
          format: uuid4
        - in: body
          name: body
          required: true
          schema:
            $ref: "#/definitions/PatchScreeningRequest"
      responses:
        200:
          description: Created new screen
          schema:
            $ref: "#/definitions/GetScreeningResponse"
        404:
          description: Not found
        500:
          description: Internal server error
    delete:
      tags:
        - screenings
      summary: Patch screen
      operationId: deleteScreening
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: path
          name: screeningID
          required: true
          type: string
          format: uuid4
      responses:
        204:
          description: Screen deleted successfully
        404:
          description: Not found
        500:
          description: Internal server error
definitions:
  LoginRequest:
    type: object
    required:
      - email
      - password
    properties:
      email:
        type: string
        maxLength: 255
      password:
        type: string
        maxLength: 255
  CompleteNewUserRegistrationRequest:
    type: object
    required:
      - username
      - password
    properties:
      username:
        type: string
        maxLength: 255
      password:
        type: string
        maxLength: 255
  RegisterNewUserRequest:
    type: object
    required:
      - username
      - password
      - email
      - firstName
      - lastName
    properties:
      username:
        type: string
        maxLength: 255
      password:
        type: string
        maxLength: 255
      email:
        type: string
        maxLength: 255
        format: email
      firstName:
        type: string
        maxLength: 255
      lastName:
        type: string
        maxLength: 255
  AccessTokenResponse:
    type: object
    required:
      - access_token
      - token_type
    properties:
      access_token:
        type: string
        description: |
          REQUIRED. The access token issued by the authorization server.
      token_type:
        type: string
        description: |
          REQUIRED. The type of the token issued as described in Section 7.1. 
          Value is case insensitive.
      expires_in:
        type: integer
        minimum: 0
        description: |
          RECOMMENDED. The lifetime in seconds of the access token.  For
          example, the value "3600" denotes that the access token will
          expire in one hour from the time the response was generated.
          If omitted, the authorization server SHOULD provide the
          expiration time via other means or document the default value.
      refresh_token:
        type: string
        description: |
          OPTIONAL. The refresh token, which can be used to obtain new
          access tokens using the same authorization grant as described
          in Section 6.
      scope:
        type: string
        description: |
          OPTIONAL, if identical to the scope requested by the client;
          otherwise, REQUIRED.  The scope of the access token as
          described by Section 3.3.
  OAuth2ErrorResponse:
    type: object
    required:
      - error
    properties:
      error:
        type: string
        description: |
          REQUIRED.  A single ASCII [USASCII] error code from the
          following:

          - unsupported_response_type
            The authorization server does not support obtaining an
            authorization code using this method.
          
          - invalid_request
            The request is missing a required parameter, includes an
            unsupported parameter value (other than grant type),
            repeats a parameter, includes multiple credentials,
            utilizes more than one mechanism for authenticating the
            client, or is otherwise malformed.
          
          - invalid_client
            Client authentication failed (e.g., unknown client, no
            client authentication included, or unsupported
            authentication method).  The authorization server MAY
            return an HTTP 401 (Unauthorized) status code to indicate
            which HTTP authentication schemes are supported.  If the
            client attempted to authenticate via the "Authorization"
            request header field, the authorization server MUST
            respond with an HTTP 401 (Unauthorized) status code and
            include the "WWW-Authenticate" response header field
            matching the authentication scheme used by the client.
          
          - invalid_grant
            The provided authorization grant (e.g., authorization
            code, resource owner credentials) or refresh token is
            invalid, expired, revoked, does not match the redirection
            URI used in the authorization request, or was issued to
            another client.
          
          - unauthorized_client
            The authenticated client is not authorized to use this
            authorization grant type.
          
          - unsupported_grant_type
            The authorization grant type is not supported by the
            authorization server.
          
          - invalid_scope
            The requested scope is invalid, unknown, malformed, or
            exceeds the scope granted by the resource owner.
          
          - server_error
            The authorization server encountered an unexpected
            condition that prevented it from fulfilling the request.
            (This error code is needed because a 500 Internal Server
            Error HTTP status code cannot be returned to the client
            via an HTTP redirect.)
          
          Values for the "error" parameter MUST NOT include characters
          outside the set %x20-21 / %x23-5B / %x5D-7E.
        enum:
          - invalid_request
          - invalid_client
          - invalid_grant
          - unauthorized_client
          - unsupported_grant_type
          - unsupported_response_type
          - invalid_scope
          - server_error
      error_description:
        type: string
        description: |
          OPTIONAL.  Human-readable ASCII [USASCII] text providing
          additional information, used to assist the client developer in
          understanding the error that occurred.
          Values for the "error_description" parameter MUST NOT include
          characters outside the set %x20-21 / %x23-5B / %x5D-7E.
      error_uri:
        type: string
        description: |
          OPTIONAL.  A URI identifying a human-readable web page with
          information about the error, used to provide the client
          developer with additional information about the error.
          Values for the "error_uri" parameter MUST conform to the
          URI-reference syntax and thus MUST NOT include characters
          outside the set %x21 / %x23-5B / %x5D-7E.

  Pagination:
    type: object
    properties:
      offset:
        type: integer
      limit:
        type: integer
      count:
        type: integer

  GetCinemasResponse:
    type: object
    properties:
      id:
        type: string
        format: uuid4
      street:
        type: string
      postalCode:
        type: string
      city:
        type: string
      mailAddress:
        type: string
      phoneNumber:
        type: string
      screens:
        type: array
        items:
          $ref: '#/definitions/GetScreenResponse'

  AddScreenRequest:
    type: object
    required:
      - cinemaID
      - screenName
    properties:
      cinemaID:
        type: string
        format: uuid4
      screenName:
        type: string
  PatchScreenRequest:
    type: object
    properties:
      screenName:
        type: string
        x-nullable: true
  GetScreenResponse:
    type: object
    properties:
      screenId:
        type: string
        format: uuid4
      screenName:
        type: string
      seats:
        type: array
        items:
          $ref: '#/definitions/GetSeatResponse'

  UserResponse:
    type: object
    required:
      - userId
      - username
      - email
      - firstName
      - lastName
    properties:
      userId:
        type: string
        format: uuid4
      username:
        type: string
        maxLength: 255
      email:
        type: string
        maxLength: 255
      firstName:
        type: string
        maxLength: 255
      lastName:
        type: string
        maxLength: 255

  GetSeatResponse:
    type: object
    properties:
      seatId:
        type: string
        format: uuid4
      index:
        type: integer
        format: int32
      rowIndex:
        type: integer
        format: int32
      columnIndex:
        type: integer
        format: int32
      rowOffset:
        type: number
        format: float
      columnOffset:
        type: number
        format: float

  AddMovieRequest:
    type: object
    properties:
      title:
        type: string
      genre:
        type: string
      minAge:
        type: integer
        format: int32
      movieDuration:
        type: integer
        format: int32
      cleaningServiceDuration:
        type: integer
        format: int32
      posterSource:
        type: string
      bigImageSource:
        type: string
      trailerSource:
        type: string
      description:
        type: string
      status:
        type: string
  GetMovieResponse:
    type: object
    properties:
      id:
        type: string
        format: uuid4
      title:
        type: string
      genre:
        type: string
      ageRestriction:
        type: integer
      description:
        type: string
      movieDuration:
        type: integer
      status:
        type: string
      posterImageURL:
        type: string
        format: url
      mainPageImageURL:
        type: string
        format: url
      trailerURL:
        type: string
        format: url
  EditMovieRequest:
    type: object
    properties:
      title:
        type: string
        x-nullable: true
      genre:
        type: string
        x-nullable: true
      ageRestriction:
        type: integer
        x-nullable: true
      description:
        type: string
        x-nullable: true
      movieDuration:
        type: integer
        x-nullable: true
      status:
        type: string
        x-nullable: true
      posterImageURL:
        type: string
        format: url
        x-nullable: true
      mainPageImageURL:
        type: string
        format: url
        x-nullable: true
      trailerURL:
        type: string
        format: url
        x-nullable: true

  AddScreeningRequest:
    type: object
    properties:
      screenId:
        type: string
        format: uuid4
      movieId:
        type: string
        format: uuid4
      screeningStart:
        type: string
        format: date-time
      adsDuration:
        type: integer
        format: int32
      cleaningServiceDuration:
        type: integer
        format: int32
      movieType:
        type: string
        enum:
          - D2
          - D3
      movieSoundType:
        type: string
        enum:
          - LECTOR
          - DUBBING
          - SUBTITLES
  PatchScreeningRequest:
    type: object
    properties:
      screenId:
        type: string
        format: uuid4
        x-nullable: true
      movieId:
        type: string
        format: uuid4
        x-nullable: true
      screeningStart:
        type: string
        format: date-time
        x-nullable: true
      adsDuration:
        type: integer
        format: int32
        x-nullable: true
      cleaningServiceDuration:
        type: integer
        format: int32
        x-nullable: true
  GetScreeningResponse:
    type: object
    properties:
      screeningId:
        type: string
        format: uuid4
      screeningStart:
        type: string
        format: date-time
      screeningEnd:
        type: string
        format: date-time
      adsDuration:
        type: integer
        format: int32
      cleaningServiceDuration:
        type: integer
        format: int32
      movieType:
        type: string
        enum:
          - D2
          - D3
      movieSoundType:
        type: string
        enum:
          - LECTOR
          - DUBBING
          - SUBTITLES
      movie:
        $ref: "#/definitions/GetMovieResponse"
      screen:
        $ref: "#/definitions/GetScreenResponse"
