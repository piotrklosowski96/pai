// This file is auto-generated by @hey-api/openapi-ts

export type LoginRequest = {
    email: string;
    password: string;
};

export type CompleteNewUserRegistrationRequest = {
    username: string;
    password: string;
};

export type RegisterNewUserRequest = {
    username: string;
    password: string;
    email: string;
    firstName: string;
    lastName: string;
};

export type AccessTokenResponse = {
    /**
     * REQUIRED. The access token issued by the authorization server.
     *
     */
    access_token: string;
    /**
     * REQUIRED. The type of the token issued as described in Section 7.1.
     * Value is case insensitive.
     *
     */
    token_type: string;
    /**
     * RECOMMENDED. The lifetime in seconds of the access token.  For
     * example, the value "3600" denotes that the access token will
     * expire in one hour from the time the response was generated.
     * If omitted, the authorization server SHOULD provide the
     * expiration time via other means or document the default value.
     *
     */
    expires_in?: number;
    /**
     * OPTIONAL. The refresh token, which can be used to obtain new
     * access tokens using the same authorization grant as described
     * in Section 6.
     *
     */
    refresh_token?: string;
    /**
     * OPTIONAL, if identical to the scope requested by the client;
     * otherwise, REQUIRED.  The scope of the access token as
     * described by Section 3.3.
     *
     */
    scope?: string;
};

export type OAuth2ErrorResponse = {
    /**
     * REQUIRED.  A single ASCII [USASCII] error code from the
     * following:
     *
     * - unsupported_response_type
     * The authorization server does not support obtaining an
     * authorization code using this method.
     *
     * - invalid_request
     * The request is missing a required parameter, includes an
     * unsupported parameter value (other than grant type),
     * repeats a parameter, includes multiple credentials,
     * utilizes more than one mechanism for authenticating the
     * client, or is otherwise malformed.
     *
     * - invalid_client
     * Client authentication failed (e.g., unknown client, no
     * client authentication included, or unsupported
     * authentication method).  The authorization server MAY
     * return an HTTP 401 (Unauthorized) status code to indicate
     * which HTTP authentication schemes are supported.  If the
     * client attempted to authenticate via the "Authorization"
     * request header field, the authorization server MUST
     * respond with an HTTP 401 (Unauthorized) status code and
     * include the "WWW-Authenticate" response header field
     * matching the authentication scheme used by the client.
     *
     * - invalid_grant
     * The provided authorization grant (e.g., authorization
     * code, resource owner credentials) or refresh token is
     * invalid, expired, revoked, does not match the redirection
     * URI used in the authorization request, or was issued to
     * another client.
     *
     * - unauthorized_client
     * The authenticated client is not authorized to use this
     * authorization grant type.
     *
     * - unsupported_grant_type
     * The authorization grant type is not supported by the
     * authorization server.
     *
     * - invalid_scope
     * The requested scope is invalid, unknown, malformed, or
     * exceeds the scope granted by the resource owner.
     *
     * - server_error
     * The authorization server encountered an unexpected
     * condition that prevented it from fulfilling the request.
     * (This error code is needed because a 500 Internal Server
     * Error HTTP status code cannot be returned to the client
     * via an HTTP redirect.)
     *
     * Values for the "error" parameter MUST NOT include characters
     * outside the set %x20-21 / %x23-5B / %x5D-7E.
     *
     */
    error: 'invalid_request' | 'invalid_client' | 'invalid_grant' | 'unauthorized_client' | 'unsupported_grant_type' | 'unsupported_response_type' | 'invalid_scope' | 'server_error';
    /**
     * OPTIONAL.  Human-readable ASCII [USASCII] text providing
     * additional information, used to assist the client developer in
     * understanding the error that occurred.
     * Values for the "error_description" parameter MUST NOT include
     * characters outside the set %x20-21 / %x23-5B / %x5D-7E.
     *
     */
    error_description?: string;
    /**
     * OPTIONAL.  A URI identifying a human-readable web page with
     * information about the error, used to provide the client
     * developer with additional information about the error.
     * Values for the "error_uri" parameter MUST conform to the
     * URI-reference syntax and thus MUST NOT include characters
     * outside the set %x21 / %x23-5B / %x5D-7E.
     *
     */
    error_uri?: string;
};

export type Pagination = {
    offset?: number;
    limit?: number;
    count?: number;
};

export type GetCinemasResponse = {
    id?: string;
    street?: string;
    postalCode?: string;
    city?: string;
    mailAddress?: string;
    phoneNumber?: string;
    screens?: Array<GetScreenResponse>;
};

export type AddScreenRequest = {
    cinemaID: string;
    screenName: string;
};

export type PatchScreenRequest = {
    screenName?: string | null;
};

export type GetScreenResponse = {
    screenId?: string;
    screenName?: string;
    seats?: Array<GetSeatResponse>;
};

export type UserResponse = {
    userId: string;
    username: string;
    email: string;
    firstName: string;
    lastName: string;
};

export type GetSeatResponse = {
    seatId?: string;
    index?: number;
    rowIndex?: number;
    columnIndex?: number;
    rowOffset?: number;
    columnOffset?: number;
};

export type AddMovieRequest = {
    title?: string;
    genre?: string;
    minAge?: number;
    movieDuration?: number;
    cleaningServiceDuration?: number;
    posterSource?: string;
    bigImageSource?: string;
    trailerSource?: string;
    description?: string;
    status?: string;
};

export type GetMovieResponse = {
    id?: string;
    title?: string;
    genre?: string;
    ageRestriction?: number;
    description?: string;
    movieDuration?: number;
    status?: string;
    posterImageURL?: string;
    mainPageImageURL?: string;
    trailerURL?: string;
};

export type EditMovieRequest = {
    title?: string | null;
    genre?: string | null;
    ageRestriction?: number | null;
    description?: string | null;
    movieDuration?: number | null;
    status?: string | null;
    posterImageURL?: string | null;
    mainPageImageURL?: string | null;
    trailerURL?: string | null;
};

export type AddScreeningRequest = {
    screenId?: string;
    movieId?: string;
    screeningStart?: string;
    adsDuration?: number;
    cleaningServiceDuration?: number;
    movieType?: 'D2' | 'D3';
    movieSoundType?: 'LECTOR' | 'DUBBING' | 'SUBTITLES';
};

export type PatchScreeningRequest = {
    screenId?: string | null;
    movieId?: string | null;
    screeningStart?: string | null;
    adsDuration?: number | null;
    cleaningServiceDuration?: number | null;
};

export type GetScreeningResponse = {
    screeningId?: string;
    screeningStart?: string;
    screeningEnd?: string;
    adsDuration?: number;
    cleaningServiceDuration?: number;
    movieType?: 'D2' | 'D3';
    movieSoundType?: 'LECTOR' | 'DUBBING' | 'SUBTITLES';
    movie?: GetMovieResponse;
    screen?: GetScreenResponse;
};

export type AuthenticateUsingExternalIdentityProviderData = {
    clientId: string;
    identityProviderId: string;
    redirectUri: string;
    responseType: string;
    scope?: string;
    state: string;
};

export type AuthenticateUsingExternalIdentityProviderCallbackData = {
    code: string;
    state: string;
};

export type Oauth2TokenData = {
    authorization?: string;
    clientId: string;
    clientSecret: string;
    code: string;
    grantType: 'authorization_code' | 'password';
    redirectUri?: string;
};

export type Oauth2TokenResponse = AccessTokenResponse;

export type LoginData = {
    body: LoginRequest;
};

export type LoginResponse = AccessTokenResponse;

export type RegisterData = {
    body: RegisterNewUserRequest;
};

export type RegisterResponse = unknown;

export type CompleteRegistrationData = {
    body: CompleteNewUserRegistrationRequest;
    registrationCode: string;
};

export type CompleteRegistrationResponse = unknown;

export type GetMoviesData = {
    limit?: number;
    offset?: number;
};

export type GetMoviesResponse = Pagination & {
    movies?: Array<GetMovieResponse>;
};

export type AddMovieData = {
    body: AddMovieRequest;
};

export type AddMovieResponse = GetMovieResponse;

export type GetMovieData = {
    movieId: string;
};

export type GetMovieResponse2 = GetMovieResponse;

export type DeleteMovieData = {
    movieId: string;
};

export type DeleteMovieResponse = void;

export type UpdateMovieData = {
    body: EditMovieRequest;
    movieId: string;
};

export type UpdateMovieResponse = GetMovieResponse;

export type GetCinemasData = {
    limit?: number;
    offset?: number;
};

export type GetCinemasResponse2 = Pagination & {
    cinemas?: Array<GetCinemasResponse>;
};

export type GetCinemaData = {
    cinemaId: string;
};

export type GetCinemaResponse = GetCinemasResponse;

export type AddScreenData = {
    body: AddScreenRequest;
};

export type AddScreenResponse = GetScreenResponse;

export type GetScreensData = {
    cinemaId?: string;
    limit?: number;
    name?: string;
    offset?: number;
    screenId?: string;
};

export type GetScreensResponse = Pagination & {
    screens?: Array<GetScreenResponse>;
};

export type GetScreenByIdData = {
    screenId: string;
};

export type GetScreenByIdResponse = GetScreenResponse;

export type UpdateScreenData = {
    body: PatchScreenRequest;
    screenId: string;
};

export type UpdateScreenResponse = GetScreenResponse;

export type DeleteScreenData = {
    screenId: string;
};

export type DeleteScreenResponse = void;

export type AddScreeningData = {
    body: AddScreeningRequest;
};

export type AddScreeningResponse = GetScreeningResponse;

export type GetScreeningsData = {
    cinemaId?: string;
    limit?: number;
    movieId?: string;
    offset?: number;
    screenId?: string;
    screeningId?: string;
};

export type GetScreeningsResponse = Pagination & {
    screenings?: Array<GetScreeningResponse>;
};

export type GetScreeningByIdData = {
    screeningId: string;
};

export type GetScreeningByIdResponse = GetScreeningResponse;

export type UpdateScreeningData = {
    body: PatchScreeningRequest;
    screeningId: string;
};

export type UpdateScreeningResponse = GetScreeningResponse;

export type DeleteScreeningData = {
    screeningId: string;
};

export type DeleteScreeningResponse = void;

export type $OpenApiTs = {
    '/oauth2/v1/authorize/{identityProviderId}': {
        get: {
            req: AuthenticateUsingExternalIdentityProviderData;
            res: {
                302: string;
                400: OAuth2ErrorResponse;
                500: OAuth2ErrorResponse;
            };
        };
    };
    '/oauth2/v1/callback': {
        get: {
            req: AuthenticateUsingExternalIdentityProviderCallbackData;
            res: {
                302: AccessTokenResponse;
                400: OAuth2ErrorResponse;
                500: OAuth2ErrorResponse;
            };
        };
    };
    '/oauth2/v1/token': {
        post: {
            req: Oauth2TokenData;
            res: {
                /**
                 * Successfully authorized
                 */
                200: AccessTokenResponse;
                /**
                 * Internal server error
                 */
                500: {
                    reason?: string;
                };
            };
        };
    };
    '/v1/auth/login': {
        post: {
            req: LoginData;
            res: {
                /**
                 * Successfully authorized
                 */
                200: AccessTokenResponse;
                /**
                 * Authorization failed
                 */
                401: unknown;
                /**
                 * User does not exist
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: {
                    reason?: string;
                };
            };
        };
    };
    '/v1/auth/register': {
        post: {
            req: RegisterData;
            res: {
                /**
                 * Successfully created new user
                 */
                200: unknown;
                /**
                 * User with provided information already exists
                 */
                409: unknown;
                /**
                 * Internal server error
                 */
                500: {
                    reason?: string;
                };
            };
        };
    };
    '/v1/auth/register/complete': {
        post: {
            req: CompleteRegistrationData;
            res: {
                /**
                 * User successfully registered
                 */
                200: unknown;
                /**
                 * User for provided registration code not found
                 */
                404: unknown;
                /**
                 * Registration code for requested user has expired and is no longer available
                 */
                410: unknown;
                /**
                 * Internal server error
                 */
                500: {
                    reason?: string;
                };
            };
        };
    };
    '/movies': {
        get: {
            req: GetMoviesData;
            res: {
                /**
                 * Available movies
                 */
                200: Pagination & {
    movies?: Array<GetMovieResponse>;
};
                /**
                 * Forbidden
                 */
                403: unknown;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
        post: {
            req: AddMovieData;
            res: {
                /**
                 * Created new movie
                 */
                201: GetMovieResponse;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
    };
    '/movies/{movieId}': {
        get: {
            req: GetMovieData;
            res: {
                /**
                 * Movie
                 */
                200: GetMovieResponse;
                /**
                 * Forbidden
                 */
                403: unknown;
                /**
                 * Not found
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
        delete: {
            req: DeleteMovieData;
            res: {
                /**
                 * Successfully deleted movie
                 */
                204: void;
                /**
                 * Forbidden
                 */
                403: unknown;
                /**
                 * Not found
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
        patch: {
            req: UpdateMovieData;
            res: {
                /**
                 * Successfully edited movie
                 */
                200: GetMovieResponse;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
    };
    '/cinemas': {
        get: {
            req: GetCinemasData;
            res: {
                /**
                 * OK
                 */
                200: Pagination & {
    cinemas?: Array<GetCinemasResponse>;
};
                /**
                 * Not found
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
    };
    '/cinemas/{cinemaId}': {
        get: {
            req: GetCinemaData;
            res: {
                /**
                 * OK
                 */
                200: GetCinemasResponse;
                /**
                 * Not found
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
    };
    '/screens': {
        post: {
            req: AddScreenData;
            res: {
                /**
                 * Created new screen
                 */
                201: GetScreenResponse;
                /**
                 * Not found
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
        get: {
            req: GetScreensData;
            res: {
                /**
                 * Screens list
                 */
                200: Pagination & {
    screens?: Array<GetScreenResponse>;
};
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
    };
    '/screens/{screenID}': {
        get: {
            req: GetScreenByIdData;
            res: {
                /**
                 * Screens list
                 */
                200: GetScreenResponse;
                /**
                 * Not found
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
        patch: {
            req: UpdateScreenData;
            res: {
                /**
                 * Created new screen
                 */
                200: GetScreenResponse;
                /**
                 * Not found
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
        delete: {
            req: DeleteScreenData;
            res: {
                /**
                 * Screen deleted successfully
                 */
                204: void;
                /**
                 * Not found
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
    };
    '/screening': {
        post: {
            req: AddScreeningData;
            res: {
                /**
                 * Created new screening
                 */
                201: GetScreeningResponse;
                /**
                 * Not found
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
        get: {
            req: GetScreeningsData;
            res: {
                /**
                 * Screens list
                 */
                200: Pagination & {
    screenings?: Array<GetScreeningResponse>;
};
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
    };
    '/screening/{screeningID}': {
        get: {
            req: GetScreeningByIdData;
            res: {
                /**
                 * Screenings list
                 */
                200: GetScreeningResponse;
                /**
                 * Not found
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
        patch: {
            req: UpdateScreeningData;
            res: {
                /**
                 * Created new screen
                 */
                200: GetScreeningResponse;
                /**
                 * Not found
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
        delete: {
            req: DeleteScreeningData;
            res: {
                /**
                 * Screen deleted successfully
                 */
                204: void;
                /**
                 * Not found
                 */
                404: unknown;
                /**
                 * Internal server error
                 */
                500: unknown;
            };
        };
    };
};