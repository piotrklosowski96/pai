// This file is auto-generated by @hey-api/openapi-ts

import type { CancelablePromise } from './core/CancelablePromise';
import { OpenAPI } from './core/OpenAPI';
import { request as __request } from './core/request';
import type { AuthenticateUsingExternalIdentityProviderData, AuthenticateUsingExternalIdentityProviderCallbackData, Oauth2TokenData, Oauth2TokenResponse, LoginData, LoginResponse, RegisterData, RegisterResponse, CompleteRegistrationData, CompleteRegistrationResponse, GetMoviesData, GetMoviesResponse, AddMovieData, AddMovieResponse, GetMovieData, GetMovieResponse2, DeleteMovieData, DeleteMovieResponse, UpdateMovieData, UpdateMovieResponse, GetCinemasData, GetCinemasResponse2, GetCinemaData, GetCinemaResponse, AddScreenData, AddScreenResponse, GetScreensData, GetScreensResponse, GetScreenByIdData, GetScreenByIdResponse, UpdateScreenData, UpdateScreenResponse, DeleteScreenData, DeleteScreenResponse, AddScreeningData, AddScreeningResponse, GetScreeningsData, GetScreeningsResponse, GetScreeningByIdData, GetScreeningByIdResponse, UpdateScreeningData, UpdateScreeningResponse, DeleteScreeningData, DeleteScreeningResponse } from './types.gen';

/**
 * @param data The data for the request.
 * @param data.identityProviderId
 * @param data.responseType
 * @param data.clientId
 * @param data.redirectUri
 * @param data.state
 * @param data.scope
 * @throws ApiError
 */
export const authenticateUsingExternalIdentityProvider = (data: AuthenticateUsingExternalIdentityProviderData): CancelablePromise<void> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/oauth2/v1/authorize/{identityProviderId}',
    path: {
        identityProviderId: data.identityProviderId
    },
    query: {
        response_type: data.responseType,
        client_id: data.clientId,
        redirect_uri: data.redirectUri,
        scope: data.scope,
        state: data.state
    },
    errors: {
        302: '',
        400: '',
        500: ''
    }
}); };

/**
 * @param data The data for the request.
 * @param data.code
 * @param data.state
 * @throws ApiError
 */
export const authenticateUsingExternalIdentityProviderCallback = (data: AuthenticateUsingExternalIdentityProviderCallbackData): CancelablePromise<void> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/oauth2/v1/callback',
    query: {
        code: data.code,
        state: data.state
    },
    errors: {
        302: '',
        400: '',
        500: ''
    }
}); };

/**
 * @param data The data for the request.
 * @param data.clientId
 * @param data.clientSecret
 * @param data.code
 * @param data.grantType
 * @param data.authorization
 * @param data.redirectUri
 * @returns AccessTokenResponse Successfully authorized
 * @throws ApiError
 */
export const oauth2Token = (data: Oauth2TokenData): CancelablePromise<Oauth2TokenResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/oauth2/v1/token',
    headers: {
        Authorization: data.authorization
    },
    query: {
        client_id: data.clientId,
        client_secret: data.clientSecret,
        code: data.code,
        grant_type: data.grantType,
        redirect_uri: data.redirectUri
    },
    errors: {
        500: 'Internal server error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.body
 * @returns AccessTokenResponse Successfully authorized
 * @throws ApiError
 */
export const login = (data: LoginData): CancelablePromise<LoginResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v1/auth/login',
    body: data.body,
    errors: {
        401: 'Authorization failed',
        404: 'User does not exist',
        500: 'Internal server error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.body
 * @returns unknown Successfully created new user
 * @throws ApiError
 */
export const register = (data: RegisterData): CancelablePromise<RegisterResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v1/auth/register',
    body: data.body,
    errors: {
        409: 'User with provided information already exists',
        500: 'Internal server error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.body
 * @param data.registrationCode
 * @returns unknown User successfully registered
 * @throws ApiError
 */
export const completeRegistration = (data: CompleteRegistrationData): CancelablePromise<CompleteRegistrationResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/v1/auth/register/complete',
    query: {
        registration_code: data.registrationCode
    },
    body: data.body,
    errors: {
        404: 'User for provided registration code not found',
        410: 'Registration code for requested user has expired and is no longer available',
        500: 'Internal server error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.offset
 * @param data.limit
 * @returns unknown Available movies
 * @throws ApiError
 */
export const getMovies = (data: GetMoviesData = {}): CancelablePromise<GetMoviesResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/movies',
    query: {
        offset: data.offset,
        limit: data.limit
    },
    errors: {
        403: 'Forbidden',
        500: 'Internal server error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.body
 * @returns GetMovieResponse Created new movie
 * @throws ApiError
 */
export const addMovie = (data: AddMovieData): CancelablePromise<AddMovieResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/movies',
    body: data.body,
    errors: {
        500: 'Internal server error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.movieId
 * @returns GetMovieResponse Movie
 * @throws ApiError
 */
export const getMovie = (data: GetMovieData): CancelablePromise<GetMovieResponse2> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/movies/{movieId}',
    path: {
        movieId: data.movieId
    },
    errors: {
        403: 'Forbidden',
        404: 'Not found',
        500: 'Internal server error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.movieId
 * @returns void Successfully deleted movie
 * @throws ApiError
 */
export const deleteMovie = (data: DeleteMovieData): CancelablePromise<DeleteMovieResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/movies/{movieId}',
    path: {
        movieId: data.movieId
    },
    errors: {
        403: 'Forbidden',
        404: 'Not found',
        500: 'Internal server error'
    }
}); };

/**
 * @param data The data for the request.
 * @param data.movieId
 * @param data.body
 * @returns GetMovieResponse Successfully edited movie
 * @throws ApiError
 */
export const updateMovie = (data: UpdateMovieData): CancelablePromise<UpdateMovieResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/movies/{movieId}',
    path: {
        movieId: data.movieId
    },
    body: data.body,
    errors: {
        500: 'Internal server error'
    }
}); };

/**
 * Get cinemas
 * @param data The data for the request.
 * @param data.offset
 * @param data.limit
 * @returns unknown OK
 * @throws ApiError
 */
export const getCinemas = (data: GetCinemasData = {}): CancelablePromise<GetCinemasResponse2> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/cinemas',
    query: {
        offset: data.offset,
        limit: data.limit
    },
    errors: {
        404: 'Not found',
        500: 'Internal server error'
    }
}); };

/**
 * Get cinema by ID
 * @param data The data for the request.
 * @param data.cinemaId
 * @returns GetCinemasResponse OK
 * @throws ApiError
 */
export const getCinema = (data: GetCinemaData): CancelablePromise<GetCinemaResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/cinemas/{cinemaId}',
    path: {
        cinemaId: data.cinemaId
    },
    errors: {
        404: 'Not found',
        500: 'Internal server error'
    }
}); };

/**
 * Add screen
 * @param data The data for the request.
 * @param data.body
 * @returns GetScreenResponse Created new screen
 * @throws ApiError
 */
export const addScreen = (data: AddScreenData): CancelablePromise<AddScreenResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/screens',
    body: data.body,
    errors: {
        404: 'Not found',
        500: 'Internal server error'
    }
}); };

/**
 * Get screens
 * @param data The data for the request.
 * @param data.offset
 * @param data.limit
 * @param data.screenId
 * @param data.cinemaId
 * @param data.name
 * @returns unknown Screens list
 * @throws ApiError
 */
export const getScreens = (data: GetScreensData = {}): CancelablePromise<GetScreensResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/screens',
    query: {
        offset: data.offset,
        limit: data.limit,
        screenID: data.screenId,
        cinemaID: data.cinemaId,
        name: data.name
    },
    errors: {
        500: 'Internal server error'
    }
}); };

/**
 * Get screens
 * @param data The data for the request.
 * @param data.screenId
 * @returns GetScreenResponse Screens list
 * @throws ApiError
 */
export const getScreenById = (data: GetScreenByIdData): CancelablePromise<GetScreenByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/screens/{screenID}',
    path: {
        screenID: data.screenId
    },
    errors: {
        404: 'Not found',
        500: 'Internal server error'
    }
}); };

/**
 * Patch screen
 * @param data The data for the request.
 * @param data.screenId
 * @param data.body
 * @returns GetScreenResponse Created new screen
 * @throws ApiError
 */
export const updateScreen = (data: UpdateScreenData): CancelablePromise<UpdateScreenResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/screens/{screenID}',
    path: {
        screenID: data.screenId
    },
    body: data.body,
    errors: {
        404: 'Not found',
        500: 'Internal server error'
    }
}); };

/**
 * Patch screen
 * @param data The data for the request.
 * @param data.screenId
 * @returns void Screen deleted successfully
 * @throws ApiError
 */
export const deleteScreen = (data: DeleteScreenData): CancelablePromise<DeleteScreenResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/screens/{screenID}',
    path: {
        screenID: data.screenId
    },
    errors: {
        404: 'Not found',
        500: 'Internal server error'
    }
}); };

/**
 * Add screening
 * @param data The data for the request.
 * @param data.body
 * @returns GetScreeningResponse Created new screening
 * @throws ApiError
 */
export const addScreening = (data: AddScreeningData): CancelablePromise<AddScreeningResponse> => { return __request(OpenAPI, {
    method: 'POST',
    url: '/screening',
    body: data.body,
    errors: {
        404: 'Not found',
        500: 'Internal server error'
    }
}); };

/**
 * Get screenings
 * @param data The data for the request.
 * @param data.offset
 * @param data.limit
 * @param data.screeningId
 * @param data.cinemaId
 * @param data.movieId
 * @param data.screenId
 * @returns unknown Screens list
 * @throws ApiError
 */
export const getScreenings = (data: GetScreeningsData = {}): CancelablePromise<GetScreeningsResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/screening',
    query: {
        offset: data.offset,
        limit: data.limit,
        screeningID: data.screeningId,
        cinemaID: data.cinemaId,
        movieID: data.movieId,
        screenID: data.screenId
    },
    errors: {
        500: 'Internal server error'
    }
}); };

/**
 * Get screens
 * @param data The data for the request.
 * @param data.screeningId
 * @returns GetScreeningResponse Screenings list
 * @throws ApiError
 */
export const getScreeningById = (data: GetScreeningByIdData): CancelablePromise<GetScreeningByIdResponse> => { return __request(OpenAPI, {
    method: 'GET',
    url: '/screening/{screeningID}',
    path: {
        screeningID: data.screeningId
    },
    errors: {
        404: 'Not found',
        500: 'Internal server error'
    }
}); };

/**
 * Patch screen
 * @param data The data for the request.
 * @param data.screeningId
 * @param data.body
 * @returns GetScreeningResponse Created new screen
 * @throws ApiError
 */
export const updateScreening = (data: UpdateScreeningData): CancelablePromise<UpdateScreeningResponse> => { return __request(OpenAPI, {
    method: 'PATCH',
    url: '/screening/{screeningID}',
    path: {
        screeningID: data.screeningId
    },
    body: data.body,
    errors: {
        404: 'Not found',
        500: 'Internal server error'
    }
}); };

/**
 * Patch screen
 * @param data The data for the request.
 * @param data.screeningId
 * @returns void Screen deleted successfully
 * @throws ApiError
 */
export const deleteScreening = (data: DeleteScreeningData): CancelablePromise<DeleteScreeningResponse> => { return __request(OpenAPI, {
    method: 'DELETE',
    url: '/screening/{screeningID}',
    path: {
        screeningID: data.screeningId
    },
    errors: {
        404: 'Not found',
        500: 'Internal server error'
    }
}); };