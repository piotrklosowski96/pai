// This file is auto-generated by @hey-api/openapi-ts

export const $LoginRequest = {
    type: 'object',
    required: ['email', 'password'],
    properties: {
        email: {
            type: 'string',
            maxLength: 255
        },
        password: {
            type: 'string',
            maxLength: 255
        }
    }
} as const;

export const $CompleteNewUserRegistrationRequest = {
    type: 'object',
    required: ['username', 'password'],
    properties: {
        username: {
            type: 'string',
            maxLength: 255
        },
        password: {
            type: 'string',
            maxLength: 255
        }
    }
} as const;

export const $RegisterNewUserRequest = {
    type: 'object',
    required: ['username', 'password', 'email', 'firstName', 'lastName'],
    properties: {
        username: {
            type: 'string',
            maxLength: 255
        },
        password: {
            type: 'string',
            maxLength: 255
        },
        email: {
            type: 'string',
            maxLength: 255,
            format: 'email'
        },
        firstName: {
            type: 'string',
            maxLength: 255
        },
        lastName: {
            type: 'string',
            maxLength: 255
        }
    }
} as const;

export const $AccessTokenResponse = {
    type: 'object',
    required: ['access_token', 'token_type'],
    properties: {
        access_token: {
            type: 'string',
            description: `REQUIRED. The access token issued by the authorization server.
`
        },
        token_type: {
            type: 'string',
            description: `REQUIRED. The type of the token issued as described in Section 7.1. 
Value is case insensitive.
`
        },
        expires_in: {
            type: 'integer',
            minimum: 0,
            description: `RECOMMENDED. The lifetime in seconds of the access token.  For
example, the value "3600" denotes that the access token will
expire in one hour from the time the response was generated.
If omitted, the authorization server SHOULD provide the
expiration time via other means or document the default value.
`
        },
        refresh_token: {
            type: 'string',
            description: `OPTIONAL. The refresh token, which can be used to obtain new
access tokens using the same authorization grant as described
in Section 6.
`
        },
        scope: {
            type: 'string',
            description: `OPTIONAL, if identical to the scope requested by the client;
otherwise, REQUIRED.  The scope of the access token as
described by Section 3.3.
`
        }
    }
} as const;

export const $OAuth2ErrorResponse = {
    type: 'object',
    required: ['error'],
    properties: {
        error: {
            type: 'string',
            description: `REQUIRED.  A single ASCII [USASCII] error code from the
following:

- unsupported_response_type
  The authorization server does not support obtaining an
  authorization code using this method.

- invalid_request
  The request is missing a required parameter, includes an
  unsupported parameter value (other than grant type),
  repeats a parameter, includes multiple credentials,
  utilizes more than one mechanism for authenticating the
  client, or is otherwise malformed.

- invalid_client
  Client authentication failed (e.g., unknown client, no
  client authentication included, or unsupported
  authentication method).  The authorization server MAY
  return an HTTP 401 (Unauthorized) status code to indicate
  which HTTP authentication schemes are supported.  If the
  client attempted to authenticate via the "Authorization"
  request header field, the authorization server MUST
  respond with an HTTP 401 (Unauthorized) status code and
  include the "WWW-Authenticate" response header field
  matching the authentication scheme used by the client.

- invalid_grant
  The provided authorization grant (e.g., authorization
  code, resource owner credentials) or refresh token is
  invalid, expired, revoked, does not match the redirection
  URI used in the authorization request, or was issued to
  another client.

- unauthorized_client
  The authenticated client is not authorized to use this
  authorization grant type.

- unsupported_grant_type
  The authorization grant type is not supported by the
  authorization server.

- invalid_scope
  The requested scope is invalid, unknown, malformed, or
  exceeds the scope granted by the resource owner.

- server_error
  The authorization server encountered an unexpected
  condition that prevented it from fulfilling the request.
  (This error code is needed because a 500 Internal Server
  Error HTTP status code cannot be returned to the client
  via an HTTP redirect.)

Values for the "error" parameter MUST NOT include characters
outside the set %x20-21 / %x23-5B / %x5D-7E.
`,
            enum: ['invalid_request', 'invalid_client', 'invalid_grant', 'unauthorized_client', 'unsupported_grant_type', 'unsupported_response_type', 'invalid_scope', 'server_error']
        },
        error_description: {
            type: 'string',
            description: `OPTIONAL.  Human-readable ASCII [USASCII] text providing
additional information, used to assist the client developer in
understanding the error that occurred.
Values for the "error_description" parameter MUST NOT include
characters outside the set %x20-21 / %x23-5B / %x5D-7E.
`
        },
        error_uri: {
            type: 'string',
            description: `OPTIONAL.  A URI identifying a human-readable web page with
information about the error, used to provide the client
developer with additional information about the error.
Values for the "error_uri" parameter MUST conform to the
URI-reference syntax and thus MUST NOT include characters
outside the set %x21 / %x23-5B / %x5D-7E.
`
        }
    }
} as const;

export const $Pagination = {
    type: 'object',
    properties: {
        offset: {
            type: 'integer'
        },
        limit: {
            type: 'integer'
        },
        count: {
            type: 'integer'
        }
    }
} as const;

export const $GetCinemasResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid4'
        },
        street: {
            type: 'string'
        },
        postalCode: {
            type: 'string'
        },
        city: {
            type: 'string'
        },
        mailAddress: {
            type: 'string'
        },
        phoneNumber: {
            type: 'string'
        },
        screens: {
            type: 'array',
            items: {
                '$ref': '#/definitions/GetScreenResponse'
            }
        }
    }
} as const;

export const $AddScreenRequest = {
    type: 'object',
    required: ['cinemaID', 'screenName'],
    properties: {
        cinemaID: {
            type: 'string',
            format: 'uuid4'
        },
        screenName: {
            type: 'string'
        }
    }
} as const;

export const $PatchScreenRequest = {
    type: 'object',
    properties: {
        screenName: {
            type: 'string',
            'x-nullable': true
        }
    }
} as const;

export const $GetScreenResponse = {
    type: 'object',
    properties: {
        screenId: {
            type: 'string',
            format: 'uuid4'
        },
        screenName: {
            type: 'string'
        },
        seats: {
            type: 'array',
            items: {
                '$ref': '#/definitions/GetSeatResponse'
            }
        }
    }
} as const;

export const $UserResponse = {
    type: 'object',
    required: ['userId', 'username', 'email', 'firstName', 'lastName'],
    properties: {
        userId: {
            type: 'string',
            format: 'uuid4'
        },
        username: {
            type: 'string',
            maxLength: 255
        },
        email: {
            type: 'string',
            maxLength: 255
        },
        firstName: {
            type: 'string',
            maxLength: 255
        },
        lastName: {
            type: 'string',
            maxLength: 255
        }
    }
} as const;

export const $GetSeatResponse = {
    type: 'object',
    properties: {
        seatId: {
            type: 'string',
            format: 'uuid4'
        },
        index: {
            type: 'integer',
            format: 'int32'
        },
        rowIndex: {
            type: 'integer',
            format: 'int32'
        },
        columnIndex: {
            type: 'integer',
            format: 'int32'
        },
        rowOffset: {
            type: 'number',
            format: 'float'
        },
        columnOffset: {
            type: 'number',
            format: 'float'
        }
    }
} as const;

export const $AddMovieRequest = {
    type: 'object',
    properties: {
        title: {
            type: 'string'
        },
        genre: {
            type: 'string'
        },
        minAge: {
            type: 'integer',
            format: 'int32'
        },
        movieDuration: {
            type: 'integer',
            format: 'int32'
        },
        cleaningServiceDuration: {
            type: 'integer',
            format: 'int32'
        },
        posterSource: {
            type: 'string'
        },
        bigImageSource: {
            type: 'string'
        },
        trailerSource: {
            type: 'string'
        },
        description: {
            type: 'string'
        },
        status: {
            type: 'string'
        }
    }
} as const;

export const $GetMovieResponse = {
    type: 'object',
    properties: {
        id: {
            type: 'string',
            format: 'uuid4'
        },
        title: {
            type: 'string'
        },
        genre: {
            type: 'string'
        },
        ageRestriction: {
            type: 'integer'
        },
        description: {
            type: 'string'
        },
        movieDuration: {
            type: 'integer'
        },
        status: {
            type: 'string'
        },
        posterImageURL: {
            type: 'string',
            format: 'url'
        },
        mainPageImageURL: {
            type: 'string',
            format: 'url'
        },
        trailerURL: {
            type: 'string',
            format: 'url'
        }
    }
} as const;

export const $EditMovieRequest = {
    type: 'object',
    properties: {
        title: {
            type: 'string',
            'x-nullable': true
        },
        genre: {
            type: 'string',
            'x-nullable': true
        },
        ageRestriction: {
            type: 'integer',
            'x-nullable': true
        },
        description: {
            type: 'string',
            'x-nullable': true
        },
        movieDuration: {
            type: 'integer',
            'x-nullable': true
        },
        status: {
            type: 'string',
            'x-nullable': true
        },
        posterImageURL: {
            type: 'string',
            format: 'url',
            'x-nullable': true
        },
        mainPageImageURL: {
            type: 'string',
            format: 'url',
            'x-nullable': true
        },
        trailerURL: {
            type: 'string',
            format: 'url',
            'x-nullable': true
        }
    }
} as const;

export const $AddScreeningRequest = {
    type: 'object',
    properties: {
        screenId: {
            type: 'string',
            format: 'uuid4'
        },
        movieId: {
            type: 'string',
            format: 'uuid4'
        },
        screeningStart: {
            type: 'string',
            format: 'date-time'
        },
        adsDuration: {
            type: 'integer',
            format: 'int32'
        },
        cleaningServiceDuration: {
            type: 'integer',
            format: 'int32'
        },
        movieType: {
            type: 'string',
            enum: ['D2', 'D3']
        },
        movieSoundType: {
            type: 'string',
            enum: ['LECTOR', 'DUBBING', 'SUBTITLES']
        }
    }
} as const;

export const $PatchScreeningRequest = {
    type: 'object',
    properties: {
        screenId: {
            type: 'string',
            format: 'uuid4',
            'x-nullable': true
        },
        movieId: {
            type: 'string',
            format: 'uuid4',
            'x-nullable': true
        },
        screeningStart: {
            type: 'string',
            format: 'date-time',
            'x-nullable': true
        },
        adsDuration: {
            type: 'integer',
            format: 'int32',
            'x-nullable': true
        },
        cleaningServiceDuration: {
            type: 'integer',
            format: 'int32',
            'x-nullable': true
        }
    }
} as const;

export const $GetScreeningResponse = {
    type: 'object',
    properties: {
        screeningId: {
            type: 'string',
            format: 'uuid4'
        },
        screeningStart: {
            type: 'string',
            format: 'date-time'
        },
        screeningEnd: {
            type: 'string',
            format: 'date-time'
        },
        adsDuration: {
            type: 'integer',
            format: 'int32'
        },
        cleaningServiceDuration: {
            type: 'integer',
            format: 'int32'
        },
        movieType: {
            type: 'string',
            enum: ['D2', 'D3']
        },
        movieSoundType: {
            type: 'string',
            enum: ['LECTOR', 'DUBBING', 'SUBTITLES']
        },
        movie: {
            '$ref': '#/definitions/GetMovieResponse'
        },
        screen: {
            '$ref': '#/definitions/GetScreenResponse'
        }
    }
} as const;